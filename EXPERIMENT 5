#include <stdio.h>

struct Process {
    int pid;
    int burst_time;
    int priority;
    int waiting_time;
    int turnaround_time;
};

// Function to sort by priority (lower value = higher priority)
void sortByPriority(struct Process p[], int n) {
    struct Process temp;
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (p[j].priority > p[j+1].priority) {
                temp = p[j];
                p[j] = p[j+1];
                p[j+1] = temp;
            }
        }
    }
}

void calculateTimes(struct Process p[], int n) {
    p[0].waiting_time = 0;
    p[0].turnaround_time = p[0].burst_time;

    for (int i = 1; i < n; i++) {
        p[i].waiting_time = p[i-1].waiting_time + p[i-1].burst_time;
        p[i].turnaround_time = p[i].waiting_time + p[i].burst_time;
    }
}

void displayTable(struct Process p[], int n) {
    float total_wait = 0, total_turnaround = 0;

    printf("\nPID\tBurst Time\tPriority\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        total_wait += p[i].waiting_time;
        total_turnaround += p[i].turnaround_time;
        printf("P%d\t%d\t\t%d\t\t%d\t\t%d\n",
            p[i].pid, p[i].burst_time, p[i].priority, p[i].waiting_time, p[i].turnaround_time);
    }

    printf("\nAverage Waiting Time: %.2f", total_wait / n);
    printf("\nAverage Turnaround Time: %.2f\n", total_turnaround / n);
}

int main() {
    int n;

    printf("Enter number of processes: ");
    scanf("%d", &n);

    struct Process p[n];

    for (int i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("Enter Burst Time and Priority for Process P%d: ", p[i].pid);
        scanf("%d %d", &p[i].burst_time, &p[i].priority);
    }

    sortByPriority(p, n);
    calculateTimes(p, n);
    displayTable(p, n);

    return 0;
}
OUTPUT
Enter number of processes: 2
Enter Burst Time and Priority for Process P1: 5
5
Enter Burst Time and Priority for Process P2: 6
65

PID	Burst Time	Priority	Waiting Time	Turnaround Time
P1	5		5		0		5
P2	6		65		5		11

Average Waiting Time: 2.50
Average Turnaround Time: 8.00


=== Code Execution Successful ===
