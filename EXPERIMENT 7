#include <stdio.h>

struct Process {
    int pid;        // Process ID
    int bt;         // Burst Time
    int at;         // Arrival Time
    int ct;         // Completion Time
    int tat;        // Turnaround Time
    int wt;         // Waiting Time
    int done;       // Whether process is completed
};

int main() {
    int n, completed = 0, current_time = 0, min_index;
    float total_tat = 0, total_wt = 0;

    printf("Enter number of processes: ");
    scanf("%d", &n);

    struct Process p[n];

    for(int i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("Enter arrival time and burst time for process %d: ", p[i].pid);
        scanf("%d%d", &p[i].at, &p[i].bt);
        p[i].done = 0;
    }

    while (completed != n) {
        int min_bt = 9999;
        min_index = -1;

        for (int i = 0; i < n; i++) {
            if (p[i].at <= current_time && p[i].done == 0 && p[i].bt < min_bt) {
                min_bt = p[i].bt;
                min_index = i;
            }
        }

        if (min_index == -1) {
            current_time++; // No process has arrived yet
        } else {
            p[min_index].ct = current_time + p[min_index].bt;
            p[min_index].tat = p[min_index].ct - p[min_index].at;
            p[min_index].wt = p[min_index].tat - p[min_index].bt;
            current_time = p[min_index].ct;
            p[min_index].done = 1;

            total_tat += p[min_index].tat;
            total_wt += p[min_index].wt;
            completed++;
        }
    }

    printf("\nPID\tAT\tBT\tCT\tTAT\tWT\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\t%d\n", p[i].pid, p[i].at, p[i].bt,
               p[i].ct, p[i].tat, p[i].wt);
    }

    printf("\nAverage Turnaround Time = %.2f", total_tat / n);
    printf("\nAverage Waiting Time = %.2f\n", total_wt / n);

    return 0;
}
OUTPUT
Enter number of processes: 4
Enter arrival time and burst time for process 1: 4
4
Enter arrival time and burst time for process 2: 6
6
Enter arrival time and burst time for process 3: 1
4
Enter arrival time and burst time for process 4: 2
0


PID	AT	BT	CT	TAT	WT
1	4	4	9	5	1
2	6	6	15	9	3
3	1	4	5	4	0
4	2	0	5	3	3

Average Turnaround Time = 5.25
Average Waiting Time = 1.75


=== Code Execution Successful ===
